{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Respuestas_Tarea_1_CC6402_2020 - Matias Vergara",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iCszeuRk0NuH"
      },
      "source": [
        "# Tarea 1: Activaciones y pasada hacia adelante en una red neuronal <br/> CC6204 Deep Learning, Universidad de Chile  <br/> Hoja de respuestas\n",
        "## Nombre: \n",
        "Fecha de entrega: 2 de octubre de *2020*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8QQB7jV7LMEo",
        "outputId": "e3b95375-321a-4b3e-83ab-86ce543abd25",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "!pip install torch==1.5.1+cu101 torchvision==0.6.1+cu101 -f https://download.pytorch.org/whl/torch_stable.html\n",
        "# Este notebook está pensado para correr en CoLaboratory. \n",
        "# Lo único imprescindible por importar es torch \n",
        "import torch\n",
        "\n",
        "# Posiblemenete quieras instalar e importar ipdb para debuggear.\n",
        "# Si es así, descomenta lo siguiente\n",
        "# !pip install -q ipdb\n",
        "# import ipdb\n",
        "\n",
        "# Aqui instalamos la libreria de correccion del curso\n",
        "!pip install \"git+https://github.com/dccuchile/CC6204.git@master#egg=cc6204&subdirectory=autocorrect\"\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Looking in links: https://download.pytorch.org/whl/torch_stable.html\n",
            "Collecting torch==1.5.1+cu101\n",
            "\u001b[?25l  Downloading https://download.pytorch.org/whl/cu101/torch-1.5.1%2Bcu101-cp36-cp36m-linux_x86_64.whl (704.4MB)\n",
            "\u001b[K     |████████████████████████████████| 704.4MB 21kB/s \n",
            "\u001b[?25hCollecting torchvision==0.6.1+cu101\n",
            "\u001b[?25l  Downloading https://download.pytorch.org/whl/cu101/torchvision-0.6.1%2Bcu101-cp36-cp36m-linux_x86_64.whl (6.6MB)\n",
            "\u001b[K     |████████████████████████████████| 6.6MB 61.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch==1.5.1+cu101) (0.16.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torch==1.5.1+cu101) (1.18.5)\n",
            "Requirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision==0.6.1+cu101) (7.0.0)\n",
            "Installing collected packages: torch, torchvision\n",
            "  Found existing installation: torch 1.6.0+cu101\n",
            "    Uninstalling torch-1.6.0+cu101:\n",
            "      Successfully uninstalled torch-1.6.0+cu101\n",
            "  Found existing installation: torchvision 0.7.0+cu101\n",
            "    Uninstalling torchvision-0.7.0+cu101:\n",
            "      Successfully uninstalled torchvision-0.7.0+cu101\n",
            "Successfully installed torch-1.5.1+cu101 torchvision-0.6.1+cu101\n",
            "Collecting cc6204\n",
            "  Cloning https://github.com/dccuchile/CC6204.git (to revision master) to /tmp/pip-install-t6zmrj_2/cc6204\n",
            "  Running command git clone -q https://github.com/dccuchile/CC6204.git /tmp/pip-install-t6zmrj_2/cc6204\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from cc6204) (2.23.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from cc6204) (1.18.5)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (from cc6204) (1.5.1+cu101)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (3.0.4)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (2020.6.20)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch->cc6204) (0.16.0)\n",
            "Building wheels for collected packages: cc6204\n",
            "  Building wheel for cc6204 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for cc6204: filename=cc6204-0.3.2-cp36-none-any.whl size=4708 sha256=aa5db947c32cf1e65f03a8afe893da81181e1e15771cb86edc89f7b67c60f930\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-ihuh9g3b/wheels/62/f0/30/aadcb7ce24a2f9c935890518e902d4e23bf97b80f47bb64414\n",
            "Successfully built cc6204\n",
            "Installing collected packages: cc6204\n",
            "Successfully installed cc6204-0.3.2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "49OevYJkMdgW",
        "outputId": "9707ceed-772d-46a0-fd83-c0f2732579c6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "source": [
        "# importamos las herramientas del curso\n",
        "from cc6204 import AutoCorrect, FailedTest\n",
        "\n",
        "# ingresa el host y port que posteamos en u-cursos\n",
        "\n",
        "corrector = AutoCorrect(host=\"cc6204.dcc.uchile.cl\", port=443)\n",
        "\n",
        "# anota el token que te daremos en u-cursos\n",
        "\n",
        "token = \"]ye/Ox;nsz\""
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Connection stablished\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uq9u0IfT0VRp"
      },
      "source": [
        "# Parte 1: Funciones de activación y función de salida"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DMw80P8o0qrJ"
      },
      "source": [
        "## 1a) Funciones de activación"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tDhcNbNT0YNr"
      },
      "source": [
        "def sig(T):\n",
        "  return torch.reciprocal(1 + torch.exp(-1 * T))\n",
        "\n",
        "def tanh(T):\n",
        "  E = torch.exp(T)\n",
        "  e = torch.exp(-1 * T)\n",
        "  return (E - e) * torch.reciprocal(E + e)\n",
        "\n",
        "# Tu código acá\n",
        "def relu(T):\n",
        "  zeros=torch.zeros_like(T)\n",
        "  return torch.where(T>0, T, zeros)\n",
        "\n",
        "def swish(T, beta ):\n",
        "  sigmB=torch.reciprocal(1+torch.exp(-1*(T*beta)))\n",
        "  return T*sigmB\n",
        "\n",
        "def celu(T, alpha ):\n",
        "  ELUmod=alpha*(torch.exp(T/alpha)-1)\n",
        "  return torch.where(T>=0, T, ELUmod)"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s0SmO2x7M1pn",
        "outputId": "b87f0444-fe6d-4ea7-bca8-4203db12df2b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        }
      },
      "source": [
        "# correccion\n",
        "test_relu = corrector.get_test_data(homework=1, question=\"1a\", test=1, token=token)\n",
        "test_swish, swish_par = corrector.get_test_data(homework=1, question=\"1a\", test=2, token=token)\n",
        "test_celu, celu_par = corrector.get_test_data(homework=1, question=\"1a\", test=3, token=token)\n",
        "\n",
        "# probablemente quieras convertr los variables test_* a un tensor, ya que por defecto son listas\n",
        "test_relu=torch.tensor(test_relu)\n",
        "test_swish=torch.tensor(test_swish)\n",
        "test_celu=torch.tensor(test_celu)\n",
        "\n",
        "\n",
        "corrector.sumbit(homework=1, question=\"1a\", test=1, token=token, answer=relu(test_relu))\n",
        "corrector.sumbit(homework=1, question=\"1a\", test=2, token=token, answer=swish(test_swish, swish_par))\n",
        "corrector.sumbit(homework=1, question=\"1a\", test=3, token=token, answer=celu(test_celu, celu_par))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Correct Test!\n",
            "Correct Test!\n",
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e_0dTh7l1bas"
      },
      "source": [
        "## 1b) Softmax"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NjIyp2nL1le5"
      },
      "source": [
        "\n",
        "Sea la secuencia $(x_1-K, ... X_n-K)$ con $K$ un real cualquiera. Tenemos que:\n",
        "\n",
        "\\begin{equation}\n",
        "s_i' = \\frac{e^{x_i-K}}{\\sum_{j=1}^{n}e^{x_j-K}} = \\frac{e^{x_i-K}}{e^{x_1-K}+e^{x_2-K}+\\ldots+e^{x_i-K}+\\ldots +e^{x_n-K}}\n",
        "\\end{equation}\n",
        "\\\n",
        "\\begin{equation}\n",
        "=\\frac{e^{-K}\\cdot e^{x_i}}{e^{-K}(e^{x_1}+e^{x_2}+\\ldots+e^{x_i}+\\ldots +e^{x_n})}\n",
        "\\end{equation}\n",
        "\\\n",
        "\\begin{equation}\n",
        "=\\frac{e^{x_i}}{(e^{x_1}+e^{x_2}+\\ldots+e^{x_i}+\\ldots +e^{x_n})}\n",
        "\\end{equation}\n",
        "\\\n",
        "\\begin{equation}\n",
        "=s_i\n",
        "\\end{equation}\n",
        "Dado que la construcción es la misma para todos los $s_i$ y que $K$, tenemos el resultado buscado: La secuencia de salida $(s_1, \\ldots, s_n)$ no varía al restarle un mismo valor a cada elemento de la secuencia de entrada $(x_1, \\ldots, x_n)$.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jDg2sU7D1dIY"
      },
      "source": [
        "# Tu código acá\n",
        "\n",
        "def softmax(T, dim, estable=True):\n",
        "  # Los valores a restar serán los máximos de dim, para disminuir tanto \n",
        "  # como podamos las exponenciales (dejando una en 0 exp(0)). \n",
        "  if estable: \n",
        "    max_val=torch.max(T, dim, keepdim=True)[0] # [0] para recuperar el valor y no el indice.\n",
        "    exp_T = torch.exp(T-max_val) # Aplicamos exponencial a cada entrada\n",
        "  else: # No aplicamos la reducción de exponenciales\n",
        "    exp_T = torch.exp(T) \n",
        "  exp_sum = torch.sum(exp_T, dim, keepdim=True, dtype=torch.double) # Calculamos el divisor\n",
        "  return exp_T*torch.reciprocal(exp_sum)\n"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4nJhjuGZXgkM",
        "outputId": "01e7ad8a-d25d-40ba-a1c5-817d70187294",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 94
        }
      },
      "source": [
        "test_softmax, _dim = corrector.get_test_data(homework=1, question=\"1b\", test=1, token=token)\n",
        "test_softmax=torch.tensor(test_softmax)\n",
        "corrector.sumbit(homework=1, question=\"1b\", test=1, token=token, answer=softmax(test_softmax, dim=_dim))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "662XLsDA9XXI"
      },
      "source": [
        "# Parte 2: Red neuronal y pasada hacia adelante (forward)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fTUm9ZbX9bRA"
      },
      "source": [
        "## 2a) Clase para red neuronal, 2b) Iterando por parametros, 2d) Pasada hacia adelante"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f_jeuYbv9WhK"
      },
      "source": [
        "class FFNN(torch.nn.Module):\n",
        "  def __init__(self, F, l_h, l_a, C, alphacelu=1, betaswish=1):\n",
        "    super(FFNN, self).__init__()\n",
        "    #Entrada\n",
        "    self.entry = torch.nn.Parameter(torch.rand(F, l_h[0]))\n",
        "    #Capas ocultas y sus pesos\n",
        "    self.hiddens = torch.nn.ParameterList([torch.nn.Parameter(torch.rand(l_h[i], l_h[i+1])) for i in range(0, len(l_h)-1)])\n",
        "    self.hiddens.append(torch.nn.Parameter(torch.rand(l_h[len(l_h)-1], C)))\n",
        "    #Sesgos \n",
        "    self.bias = torch.nn.ParameterList([torch.nn.Parameter(torch.zeros(l_h[i])) for i in range(0, len(l_h))])\n",
        "    #Funciones de activacion\n",
        "    self.activations = l_a\n",
        "    #Salida\n",
        "    self.U = torch.nn.Parameter(torch.rand(l_h[len(l_h)-1], C))\n",
        "    self.c = torch.nn.Parameter(torch.rand(1, C))\n",
        "    #Parametros opcionales\n",
        "    self.alphacelu = alphacelu\n",
        "    self.betaswish = betaswish\n",
        "  \n",
        "  #Setters de los distintos parametros\n",
        "  def setU(self, UTensor):\n",
        "    self.U = torch.nn.Parameter(UTensor)\n",
        "\n",
        "  def setC (self, outTensor):\n",
        "    self.c = torch.nn.Parameter(outTensor)\n",
        "\n",
        "  def setEntry (self, entryTensor):\n",
        "    self.entry = torch.nn.Parameter(entryTensor)\n",
        "  \n",
        "  # Dos posibilidades: se busca modificar W de una capa especifica o\n",
        "  # se desea modificar toda la lista de tensores de capa oculta.\n",
        "  def setHiddens(self, newHiddens, index=-1):\n",
        "    if index!= -1 and newHiddens!=None:\n",
        "      self.hiddens[index] = torch.nn.Parameter(newHiddens)\n",
        "    else:\n",
        "      self.hiddens = torch.nn.ParameterList(newHiddens)\n",
        "  \n",
        "  # Dos posibilidades: se busca modificar la activación de una capa especifica o\n",
        "  # se desea modificar toda la lista de activaciones\n",
        "  def setActivations(self, newActivations, index=-1):\n",
        "      if index!= -1 and newActivations!=None:\n",
        "        self.activations[index] = newActivations\n",
        "      else:\n",
        "        self.activations = newActivations\n",
        "\n",
        "  # Dos posibilidades: se busca modificar el bias de una capa especifica o\n",
        "  # se desea modificar toda la lista de tensores de bias\n",
        "  def setBias(self, bias, index =-1):\n",
        "    if index!= -1:\n",
        "      self.bias[index]=torch.nn.Parameter(bias)\n",
        "    else:\n",
        "      self.bias = torch.nn.ParameterList(bias)\n",
        "\n",
        "  def setAlphaCelu(alpha):\n",
        "    self.alphacelu = torch.nn.Parameter(alpha)\n",
        "  \n",
        "  def setBetaSwish(beta):\n",
        "    self.betaswish = torch.nn.Parameter(beta)\n",
        "  \n",
        "  def resumen(self):\n",
        "    for name, param in self.named_parameters():\n",
        "     print (\"Parámetro: \"+name+\". Dimensiones: \"+param.size())\n",
        "\n",
        "  #Funcion forward con softmax en la primera dimensión.\n",
        "  def forward(self, x):\n",
        "    #Entrada\n",
        "    h = self.activations[0](x.mm(self.entry)+self.bias[0])\n",
        "    #Ocultas\n",
        "    for i in range (0, len(self.hiddens)-1):\n",
        "      h = self.activations[i+1](h.mm(self.hiddens[i])+self.bias[i+1])\n",
        "    #Salida\n",
        "    y = softmax(h.mm(self.U) + self.c,1)\n",
        "    return y"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bgf5Xx-34Pa1"
      },
      "source": [
        "## 2c) Moviendo los parámetros entre dispositivos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2zppplXd4QXa",
        "outputId": "fa5f9779-7c38-4b92-be96-f09d6193a07d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        }
      },
      "source": [
        "# Tu código acá\n",
        "red_neuronal_test = FFNN(20000, [300, 500], [relu, sig], 200)\n",
        "red_neuronal_test.to('cuda')\n",
        "!nvidia-smi"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fri Oct  2 23:51:29 2020       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 455.23.05    Driver Version: 418.67       CUDA Version: 10.1     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   67C    P0    31W /  70W |    815MiB / 15079MiB |      1%      Default |\n",
            "|                               |                      |                 ERR! |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "swTnKxznL6Ep"
      },
      "source": [
        "# Parte 3: Probando tu red con parámetros pre-entrenados para MNIST"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uOBcElJ7BPcQ",
        "outputId": "1e635f4f-365c-4214-a2b5-7668cfb5bec1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Importamos MNIST desde torchvision.\n",
        "from torchvision.datasets import MNIST \n",
        "\n",
        "# Importamos una función para convertir imágenes en tensores.\n",
        "from torchvision.transforms import ToTensor\n",
        "\n",
        "# Importamos funcionalidades útiles para mirar los datos.\n",
        "from matplotlib.pyplot import subplots\n",
        "from random import randint\n",
        "\n",
        "# Descarga y almacena el conjunto de prueba de MNIST.\n",
        "dataset = MNIST('mnist', train=False, transform=ToTensor(), download=True)\n",
        "print('Cantidad total de datos:',len(dataset))"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cantidad total de datos: 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s6s-z1DNL-J0"
      },
      "source": [
        "## 3b) Cargando los parámetros pre-entrenados"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SLeq3y8FE3SU"
      },
      "source": [
        "from numpy import loadtxt\n",
        "#Carga en memoria de los parametros. Deben estar en el directorio actual.\n",
        "W1 = torch.from_numpy(loadtxt('W1.txt')).float()\n",
        "W2 = torch.from_numpy(loadtxt('W2.txt')).float()\n",
        "b1 = torch.from_numpy(loadtxt('b1.txt')).float()\n",
        "b2 = torch.from_numpy(loadtxt('b2.txt')).float()\n",
        "c = torch.from_numpy(loadtxt('c.txt')).float()\n",
        "U = torch.from_numpy(loadtxt('U.txt')).float()\n",
        "\n",
        "\n",
        "#Asignación de parametros a red neuronal mediante setters\n",
        "red_neuronal = FFNN(784, [32, 16], [relu, relu], 10)\n",
        "red_neuronal.setEntry(W1)\n",
        "red_neuronal.setHiddens(W2,0)\n",
        "red_neuronal.setBias(b1, 0)\n",
        "red_neuronal.setBias(b2, 1)\n",
        "red_neuronal.setU(U)\n",
        "red_neuronal.setC(c)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WWRa68ZFMIyr"
      },
      "source": [
        "## 3c) Cálcula la predicción de un ejemplo al azar"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a-SaIzRoMMoc",
        "outputId": "89ff92bd-f537-48e8-83f0-eab141cfe291",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        }
      },
      "source": [
        "import random\n",
        "\n",
        "# Llamado a un dato aleatorio del dataset y despliegue de imagen  \n",
        "n_ejemplos = 1\n",
        "fig, ax = subplots(nrows=n_ejemplos , figsize=(2,n_ejemplos*3))\n",
        "idx = random.randint(0,len(dataset))\n",
        "T, l = dataset[idx] \n",
        "img = T.view(28,28).numpy()\n",
        "ax.set_title(\"clase: \"+ str(l))\n",
        "ax.imshow(img)\n",
        "\n",
        "# Transformación de la imagen a dimensión 1-N (columna) y pasada por la FFNN\n",
        "y = red_neuronal.forward(T.view(1,784))\n",
        "\n",
        "# Despliegue de resultados\n",
        "#print(\"Tensor de probabilidades resultante: \\n\" + str(y) + \"\\n\")\n",
        "valor, max = y.max(1)\n",
        "print(\"Clase real: \" + str(l))\n",
        "print(\"Clase según FFNN: \" + str(max.tolist()[0]))\n"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Clase real: 3\n",
            "Clase según FFNN: 3\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x216 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i1cZFU8rMNr1"
      },
      "source": [
        "## 3d) Pasando todos los ejemplos por la red con un `DataLoader`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mL49_0ZAMRd_",
        "outputId": "9d980f43-c24c-41f7-bcac-b441379f9e51",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 100
        }
      },
      "source": [
        "import time\n",
        "from torch.utils.data import DataLoader\n",
        "def calcula_acierto(red, dataset, batch_size=100, device='cuda'):\n",
        "  tiempo=time.time()\n",
        "  dataloader = DataLoader(dataset, batch_size)\n",
        "  evaluados=0\n",
        "  correctos=0\n",
        "  red=red.to(device)\n",
        "\n",
        "  for x,y in dataloader:\n",
        "    x=x.to(device)\n",
        "    y=y.to(device)\n",
        "    x=x.view(batch_size,28,28)\n",
        "    for i in range (len(x)):\n",
        "      entrada=x[i]\n",
        "      resultado = red.forward(entrada.view(1,784))\n",
        "      valor, indice = resultado.max(1)\n",
        "      if indice == y[i]:\n",
        "        correctos+=1\n",
        "      evaluados+=1\n",
        "      \n",
        "  #Mostrar tasa de acierto y tiempo de procesamiento\n",
        "  print(\"Tasa de acierto: \"+str(round(correctos/evaluados, 3)*100)+\"%\")\n",
        "  print(\"Tiempo utilizado en \"+device+\": \"+ str(time.time()-tiempo))\n",
        "  return correctos/evaluados\n",
        "\n",
        "calcula_acierto(red_neuronal, dataset, device='cuda')\n",
        "calcula_acierto(red_neuronal, dataset, device='cpu')\n",
        "\n"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tasa de acierto: 96.1%\n",
            "Tiempo utilizado en cuda: 5.510158061981201\n",
            "Tasa de acierto: 96.1%\n",
            "Tiempo utilizado en cpu: 3.1785285472869873\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9612"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "he2liP1mtxOr"
      },
      "source": [
        "Curiosamente, estamos obteniendo un tiempo de procesamiento $t$ tal que\n",
        "$t(cuda)=2*t(cpu)$. Desconocemos el motivo de esto, pero imaginamos que quizá el hecho de pasar los tensores a un dispositivo toma cierto tiempo que para datasets grandes y en donde se realiza un gran número de operaciones es despreciable, pero para este caso no lo es.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EKXqo4FpX2Id"
      },
      "source": [
        "### Correccion red"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y4igIE4Kts3q"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "itWs4t9feO1u"
      },
      "source": [
        "from torch.utils.data import Subset\n",
        "indices = corrector.get_test_data(homework=1, question=\"network\", test=1, token=token)\n",
        "test_set = Subset(dataset, indices)\n"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZUYJqcbR2IFv",
        "outputId": "9b61431f-6024-45f9-ac17-8843557bb729",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "#Seteamos el device en el que queremos trabajar\n",
        "device='cuda'\n",
        "your_network = red_neuronal.to(device)\n",
        "\n",
        "#Cargamos el dataloader con todos los datos en un solo batch\n",
        "from torch.utils.data import DataLoader\n",
        "dataloader = DataLoader(test_set, len(test_set))\n",
        "\n",
        "#Pasamos el batch por la red\n",
        "for x,y in dataloader:\n",
        "  x=x.view(-1,784)\n",
        "  x=x.to(device)\n",
        "  y=y.to(device)\n",
        "  probabilidades = your_network(x).argmax(1)\n",
        "\n",
        "result = probabilidades\n",
        "\n",
        "corrector.sumbit(homework=1, question=\"network\", test=1, token=token, answer=result)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3pgWygWCMYTx"
      },
      "source": [
        "## 3e) Opcional: Muestra los casos en donde la red se equivoca"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FM_eP23XMaTn",
        "outputId": "e905d56f-9b3f-43c5-c059-11f12357fd1a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 933
        }
      },
      "source": [
        "import random\n",
        "device='cpu'\n",
        "red_neuronal = red_neuronal.to(device)\n",
        "# Llamado a datos aleatorios del dataset \n",
        "\n",
        "n_ejemplos = 5\n",
        "fig, axs = subplots(nrows=n_ejemplos, figsize=(2,n_ejemplos*3))\n",
        "\n",
        "i=0\n",
        "while i < n_ejemplos:  \n",
        "  idx = random.randint(0,len(dataset)-1)\n",
        "  T, l = dataset[idx]\n",
        "  img = T.view(28,28).numpy()\n",
        "  T = T.to(device)\n",
        "  \n",
        "  # Transformación de la imagen a dimensión 1-N (columna) y pasada por la FFNN\n",
        "  y = red_neuronal.forward(T.view(1,784))\n",
        "\n",
        "  # Analisis de resultados\n",
        "  valor, max = y.max(1)\n",
        "\n",
        "  if max.tolist()[0]!=l:\n",
        "    axs[i].set_title(\"clase: \"+ str(l))\n",
        "    axs[i].imshow(img)\n",
        "    print(\"Imagen nº\"+ str(i) +\": Valor real: \" + str(l) +\". Predicción: \" + str(max.tolist()[0])+\".\" )\n",
        "    i+=1"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Imagen nº0: Valor real: 9. Predicción: 3.\n",
            "Imagen nº1: Valor real: 5. Predicción: 6.\n",
            "Imagen nº2: Valor real: 7. Predicción: 9.\n",
            "Imagen nº3: Valor real: 8. Predicción: 1.\n",
            "Imagen nº4: Valor real: 5. Predicción: 4.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 144x1080 with 5 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W19Rla7gN8mk"
      },
      "source": [
        "# Es razonable el error que se comete?\n",
        "\n",
        "###### Según lo observando iterando un par de veces el bloque de código anterior, el error cometido es bastante razonable la mayoría del tiempo, pues se corresponde con números escritos en una forma ''poco común'' (por ejemplo, el 4 que se forma de triángulo y un ''palito'', con respecto al 4 formado por ''3 palitos'', que es más frecuente en el dataset) o bien se trata de verdaderas aberraciones de números. \n",
        "\n",
        "###### De todas formas, hay que admitir también que se le pasan algunos números ''fáciles'', pero la frecuencia de esto es aparentemente bastante más  baja.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "beF870pABHKe"
      },
      "source": [
        "3f) Opcional: Crea tus propios ejemplos de dígitos para clasificar"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KOqCJx4LBG1W"
      },
      "source": [
        "# Acá tu código"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}