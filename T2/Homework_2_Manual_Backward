{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.8"
    },
    "colab": {
      "name": "Respuestas_Tarea_2_CC6204_2020_Matias_Vergara",
      "provenance": [],
      "collapsed_sections": []
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vEJLFL-H5axT"
      },
      "source": [
        "# Tarea 2: Backpropagation, descenso de gradiente y entrenamiento <br/> CC6204 Deep Learning, Universidad de Chile  <br/> Hoja de respuestas\n",
        "## Nombre: Matías Vergara Silva\n",
        "Fecha de entrega: 16 de octubre de 2020\n",
        "\n",
        "Para la **corrección automática** hemos creado una funcionalidad nueva que les permite comprobar el tiempo que demora su solución. En colab estos tiempos pueden ser variables entre una ejecución y otra del mismo código. No se preocupen si les falla el test por `time` algunas veces. Pueden hacer `time=0` en la ultima linea de cada test para evitar estos errores. También hemos usado nombres para los tests. Estos pueden serles de ayuda para determinar qué partes de su implementación deben corregir ;-)\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9rN1E2MUXDSn",
        "outputId": "61f9bcf9-2fe3-4804-c6ee-8ff0debc7d28",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        }
      },
      "source": [
        "# Este notebook está pensado para correr en CoLaboratory. \n",
        "# Lo único imprescindible por importar es torch\n",
        "import torch\n",
        "\n",
        "# Para mostrar variables en el loop de entrenamiento\n",
        "import time, sys\n",
        "\n",
        "\n",
        "# Posiblemenete quieras instalar e importar ipdb para debuggear.\n",
        "# Si es así, descomenta lo siguiente:\n",
        "# !pip install -q ipdb\n",
        "# import ipdb\n",
        "\n",
        "# Aqui instalamos la libreria de correccion del curso\n",
        "!pip install -U \"git+https://github.com/dccuchile/CC6204.git@master#egg=cc6204&subdirectory=autocorrect\"\n",
        "from timeit import default_timer as timer"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting cc6204\n",
            "  Cloning https://github.com/dccuchile/CC6204.git (to revision master) to /tmp/pip-install-nx4qirpj/cc6204\n",
            "  Running command git clone -q https://github.com/dccuchile/CC6204.git /tmp/pip-install-nx4qirpj/cc6204\n",
            "Requirement already satisfied, skipping upgrade: requests in /usr/local/lib/python3.6/dist-packages (from cc6204) (2.23.0)\n",
            "Requirement already satisfied, skipping upgrade: numpy in /usr/local/lib/python3.6/dist-packages (from cc6204) (1.18.5)\n",
            "Requirement already satisfied, skipping upgrade: torch in /usr/local/lib/python3.6/dist-packages (from cc6204) (1.6.0+cu101)\n",
            "Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (1.24.3)\n",
            "Requirement already satisfied, skipping upgrade: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (3.0.4)\n",
            "Requirement already satisfied, skipping upgrade: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (2.10)\n",
            "Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->cc6204) (2020.6.20)\n",
            "Requirement already satisfied, skipping upgrade: future in /usr/local/lib/python3.6/dist-packages (from torch->cc6204) (0.16.0)\n",
            "Building wheels for collected packages: cc6204\n",
            "  Building wheel for cc6204 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for cc6204: filename=cc6204-0.3.2-cp36-none-any.whl size=4708 sha256=8bce2cdc49143a28949cba12446a50c83f89f566f4b7dc181ab150a519227494\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-uf00mwrp/wheels/62/f0/30/aadcb7ce24a2f9c935890518e902d4e23bf97b80f47bb64414\n",
            "Successfully built cc6204\n",
            "Installing collected packages: cc6204\n",
            "  Found existing installation: cc6204 0.3.2\n",
            "    Uninstalling cc6204-0.3.2:\n",
            "      Successfully uninstalled cc6204-0.3.2\n",
            "Successfully installed cc6204-0.3.2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PVhyLn9G5NJV",
        "outputId": "c1aca206-f287-4d1f-e664-9f589403445d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# importamos las herramientas del curso\n",
        "from cc6204 import AutoCorrect, FailedTest\n",
        "\n",
        "# ingresa el host y port que posteamos en u-cursos\n",
        "corrector = AutoCorrect(host=\"cc6204.dcc.uchile.cl\", port=443)\n",
        "\n",
        "# anota el token que te daremos en u-cursos\n",
        "token = \"]ye/Ox;nsz\""
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Connection stablished\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fg8i3agyXDSr"
      },
      "source": [
        "# Parte 1: Preliminares: funciones de activación y función de error\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NbzcMAkOXDSr"
      },
      "source": [
        "## 1a) Derivando las funciones de activación"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pcybEP7fXDSs"
      },
      "source": [
        "Escribe acá tus respuestas para las derivadas de cada función de activación.\n",
        "\n",
        "<br>\n",
        "\n",
        "\\begin{equation}\n",
        "\\boxed{\n",
        "\\frac{\\partial\\ \\text{relu}(x)}{\\partial x} = \\begin{cases}\n",
        "  0 & x\\;<\\;0 \\\\\n",
        "  1 & x\\;>\\;0         \\end{cases}}  = step(x)\n",
        "\\end{equation}\n",
        "<br>\n",
        "\n",
        "\\begin{eqnarray}\n",
        "\\frac{\\partial\\ \\text{swish}(x, \\beta)}{\\partial x} & = & \\text{sigmoid}(\\beta x) + \\beta x \\cdot \\text{sigmoid}(\\beta x)(1-\\text{sigmoid}(\\beta x)) & = &  \\boxed {\\beta\\cdot \\text{swish}(x) + \\text{sigmoid}(\\beta x) ( 1-\\beta\\cdot \\text{swish}(x))}\\\\\n",
        "\\\\\n",
        "\\frac{\\partial\\ \\text{swish}(x, \\beta)}{\\partial \\beta} & = & \\frac{x^2e^{-\\beta x}}{(1+e^{-\\beta x})^2}  = \\boxed{\\text{sigmoid}(\\beta x)(1-\\text{sigmoid}(\\beta x))\\cdot x^2} \\\\\n",
        "\\end{eqnarray}\n",
        "<br>\n",
        "\n",
        "\\begin{eqnarray}\n",
        "\\frac{\\partial\\ \\text{celu}(x, \\alpha )}{\\partial x} & = & \\begin{cases}\n",
        "  1 & x\\;\\geq\\;0 \\\\\n",
        "  exp\\;(\\frac{x}{a}) & x\\;<\\;0         \\end{cases}  \\\\\n",
        "\\\\\n",
        "\\frac{\\partial\\ \\text{celu}(x, \\alpha)}{\\partial \\alpha} & = & \\begin{cases}\n",
        "  0 & x\\;\\geq\\;0 \\\\\n",
        "  exp\\;(\\frac{x}{a})\\left(1-\\frac{x}{a}\\right) -1 & x\\;<\\;0         \\end{cases}  \\\\\n",
        "\\end{eqnarray}\n",
        "\n",
        "\\\\\n",
        "\n",
        "Un poco de desarrollo para el caso no trivial de celu: derivada parcial c/r a $\\alpha$ para el caso $x > 0$:\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\ \\text{celu}(x)}{\\partial a} = (exp(\\frac{x}{\\alpha})-1) + \\alpha \\left(\\frac{-x}{\\alpha^2}exp(\\frac{x}{\\alpha})\\right) \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "\\begin{equation}\n",
        " = (exp(\\frac{x}{\\alpha})-1) + \\alpha - \\frac{x}{a}exp(\\frac{x}{a}) \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "\\begin{equation}\n",
        " = \\boxed{(exp(\\frac{x}{\\alpha})) (1-\\frac{x}{a}) -1} \n",
        "\\end{equation}\n",
        "<br>\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6QfQVggvNuv9"
      },
      "source": [
        "# Más adelante en la tarea necesitaremos usar las funciones de activación \n",
        "# que implementaste en la Tarea 1 y sus derivadas.\n",
        "# Acá implementa las derivadas de las funciones de activación\n",
        "\n",
        "# Una forma de implementarlas (tal vez no la mejor) es reutilizando la misma función\n",
        "def sig(T, gradient=False):\n",
        "  if gradient:\n",
        "    sigT = sig(T)\n",
        "    return sigT * (1 - sigT)\n",
        "  return torch.reciprocal(1 + torch.exp(-1 * T))\n",
        "\n",
        "\n",
        "def tanh(T, gradient=False):\n",
        "  if gradient:\n",
        "    return 1-tanh(T)*tanh(T)\n",
        "  E = torch.exp(T)\n",
        "  e = torch.exp(-1 * T)\n",
        "  return (E - e) * torch.reciprocal(E + e)\n",
        "\n",
        "def relu(T, gradient=False):\n",
        "  if gradient:\n",
        "    return torch.where(T>=0, torch.ones_like(T), torch.zeros_like(T))\n",
        "  return torch.max(T, torch.zeros_like(T))\n",
        "\n",
        "def swish(T, beta=1, gradient=False, gradbeta=False, fullgrad=False):\n",
        "  if gradient:\n",
        "    swish_dx = beta*swish(T) + sig(T*beta)*(1-beta*swish(T))\n",
        "    swish_db = sig(beta*T)*(1-sig(beta*T))*torch.square(T)\n",
        "    if gradbeta:\n",
        "      return swish_db\n",
        "    elif fullgrad:\n",
        "      return (celu_dx,celu_dalpha)\n",
        "    else:\n",
        "      return swish_dx\n",
        "  return T * torch.reciprocal(1 + torch.exp(-beta * T) )\n",
        "\n",
        "\n",
        "def celu(T, alpha=1, gradient=False, gradalpha=False, fullgrad=False):\n",
        "  if gradient:\n",
        "    celu_dx = torch.where(T>=0, torch.ones_like(T), torch.exp(-alpha*T))\n",
        "    celu_dalpha = torch.where(T>=0, torch.zeros_like(T), (torch.exp(T)/alpha)*(1-T/alpha)-1)\n",
        "    if gradalpha:\n",
        "      return celu_dalpha\n",
        "    elif fullgrad:\n",
        "      return (celu_dx, celu_dalpha)\n",
        "    else:\n",
        "      return celu_dx\n",
        "  if alpha == 0:\n",
        "    raise ValueError(\"alpha cannot be 0\")\n",
        "  zeros = torch.zeros_like(T)\n",
        "  return torch.max(zeros, T) + torch.min(zeros, alpha * (T / alpha).expm1())\n",
        "\n",
        "\n",
        "def softmax(T, dim, estable=True):\n",
        "  if estable:\n",
        "    T -= T.max(dim=dim, keepdim=True)[0]  # keepdim=True => output has dim with size 1. Otherwise, dim is squeezed\n",
        "  exp = torch.exp(T)\n",
        "  return exp / torch.sum(exp, dim=dim, keepdim=True)  # keepdim=True => output has dim with size 1. Otherwise, dim is squeezed"
      ],
      "execution_count": 389,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ifPp_c1eXDSt"
      },
      "source": [
        "## 1b) Entropía Cruzada"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w4wXj3AUXDSu"
      },
      "source": [
        "def CELoss(Q, P, estable=True, epsilon=1e-8):\n",
        "  # Q y P: representan distribuciones de probabilidad discreta  \n",
        "  #        (mediante matrices con las mismas dimensiones)\n",
        "  # estable y epsilon: nos permiten lograr estabilidad numérica cuando \n",
        "  #       intentamos computar el logaritmo de valores muy pequeños.\n",
        "  #       epsilon limitará el valor mínimo del valor original cuando estable=True\n",
        "  # N es el tamaño de la primera dimension de los tensores\n",
        "  N = Q.shape[0]\n",
        "  if estable and torch.min(Q)>=epsilon:\n",
        "      ce_loss = (1.0/N)*torch.sum(-torch.sum (P * torch.log (Q ))) \n",
        "  elif not estable:\n",
        "      ce_loss = (1.0/N)*torch.sum(-torch.sum (P * torch.log (Q))) \n",
        "  else: \n",
        "      ce_loss = (1.0/N)*torch.sum(-torch.sum (P * torch.log(torch.tensor(epsilon))))\n",
        "  return ce_loss\n"
      ],
      "execution_count": 231,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qrjGpVdg4xi1",
        "outputId": "701b519e-1e45-4a2b-ff77-22b3eb50fb0b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "# Tests del API del curso\n",
        "for test in ['small', 'estable', 'eps', 'no-estable']:\n",
        "  # Obtengamos dos distribuciones de probabilidad y los parametros estable y epsilon\n",
        "  Q, P, estable, eps = corrector.get_test_data(homework=2, question=\"1b\", test=test, token=token)\n",
        "  # Corramos tu implementacion de CELoss para ver como se comporta\n",
        "  s = timer()\n",
        "  result = CELoss(Q=torch.Tensor(Q), P=torch.Tensor(P), estable=estable, epsilon=eps)\n",
        "  t = timer() - s\n",
        "\n",
        "  # Veamos si todo fue OK :)\n",
        "  # Si el Test te falla algunas veces por [time], puedes hacer time=0 ;-)\n",
        "  corrector.sumbit(homework=2, question=\"1b\", test=test, token=token, answer=result, time=t)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Correct Test!\n",
            "Correct Test!\n",
            "Correct Test!\n",
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rlLnZM7hi0C2"
      },
      "source": [
        "## 1c) Opcional: Entropía Cruzada Categórica"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7Qj1GI81izYt"
      },
      "source": [
        "# No es necesario que entregues código en esta parte.\n",
        "# Pero si quieres, igual hay espacio ;-)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EwedMCZjXDSw"
      },
      "source": [
        "# Parte 2: Más derivadas y back propagation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nftKKxlBXDSx"
      },
      "source": [
        "## 2a) Derivando la última capa"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WDBD96xWXDSx"
      },
      "source": [
        "Escribe tu cálculo acá.\n",
        "\n",
        "Tenemos $\\cal L$ :\n",
        "\\begin{equation}\n",
        "\\cal L = -\\frac{1}{N}\\sum_{i=0}^N y_i\\cdot log(\\hat{y_i})\\\n",
        "\\end{equation}<br>\n",
        "Y la función de activación $\\hat{y}$:\n",
        "\\begin{equation}\n",
        "\\hat{y} = \\text{softmax}(u^{L+1})\n",
        "\\end{equation}<br>\n",
        "Conocemos la derivada de softmax:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial \\hat{y}}{\\partial u^{L+1}} =  \\begin{cases}\n",
        "  \\hat{y_i}(1-\\hat{y_j}) & i\\;=\\;j \\\\\n",
        "  -\\hat{y_j}\\hat{y_i} \\; & i\\;\\neq\\;j       \\end{cases}  \\\\\n",
        "\\end{equation}<br>\n",
        "Dado que $\\hat{y}(u^{L+1})$. Procedemos a derivar $L$ c/r a cada $u_i$:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial \\cal L}{\\partial u^{(L+1)}_i} = -\\frac{1}{N}\\sum_k y_k \\frac{ \\partial log(\\hat{y_k})}{\\partial u^{L+1}_i} \n",
        "\\end{equation}<br>\n",
        "Aplicando regla de la cadena tensorial\n",
        "\\begin{equation}\n",
        " = -\\frac{1}{N}\\sum_k y_k \\frac{\\partial log(\\hat{y_k})}{\\partial \\hat{y_k}}\\cdot \\frac{\\partial \\hat{y_k}}{\\partial u_i^{L+1}} \n",
        "\\end{equation}<br>\n",
        "Usando la derivada de logaritmo, sacando el caso $k=i$ de la sumatoria y aplicando la derivada de softmax en cada caso resultante:\n",
        "\\begin{equation}\n",
        "= -\\frac{1}{N}\\left(\\sum_{k\\neq i} \\frac{y_k}{\\hat{y_k}} \\cdot -\\hat{y_i}\\hat{y_k} + y_k (1 - \\hat{y_k}) \\right) \n",
        "\\end{equation}<br>\n",
        "Notando que se anulan términos y reordenando:\n",
        "\\begin{equation}\n",
        "= -\\frac{1}{N}\\left(-\\sum_{k\\neq i} y_k \\hat{y_i} + y_i - y_i\\hat{y_i}\\right) \\\\\n",
        "\\end{equation}<br>\n",
        "Ingresando el signo - de afuera del paréntesis y factorizando al interior por $\\hat{y_i}$:\n",
        "\\begin{equation}\n",
        "= \\frac{1}{N}\\left(\\hat{y_i} \\left(\\sum_{k\\neq i} y_k + y_i \\right)  - y_i \\right) \\\\\n",
        "\\end{equation}<br>\n",
        "Notamos que la factorización nos dejó con la reunión de los elementos $y_k$ con $k\\neq i$ y el elemento $y_i$, lo que corresponde a todo $y$. Luego recordamos que $y$ es una distribución de probabilidad, por lo cual suma 1. Luego tenemos una multiplicación por 1, lo que nos entrega el siguiente resultado:\n",
        "\\begin{equation}\n",
        "\\\\\n",
        "\\frac{\\partial \\cal L}{\\partial u_i^{(L+1)}} =  \\frac{1}{N}  (\\hat{y_i}-y_i) \n",
        "\\end{equation}<br>\n",
        "Con lo cual obtenemos el siguiente gradiente:\n",
        "\\begin{equation}\n",
        "\\boxed{ \\frac{\\partial \\cal L}{\\partial u^{(L+1)}} =  \\frac{1}{N}  (\\hat{y}-y)  }\\\\\n",
        "\\end{equation}<br>\n",
        "Que se corresponde con el resultado visto en clases.\n",
        "<br>\n",
        "(No es necesario que repitas el código que era solo de ayuda para chequear las dimensiones.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nzp5SWKBXDSy"
      },
      "source": [
        "## 2b) Derivando la última capa (continuación)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n9cubvpeXDSz"
      },
      "source": [
        "Escribe tus respuestas acá.\n",
        "<br>\n",
        "Comenzamos con $U$:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial U} = \\frac{\\partial\\cal L}{\\partial u^{L+1}}\\frac{\\partial u^{L+1}}{\\partial U_i}\\\\  \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Recordando que $u^{L+1} = h^L_{jk}U_k+c$ y que solo nos interesan los casos donde $k=i$ (derivada no nula):\n",
        "\\begin{equation}\n",
        "\\frac{\\partial u^{L+1}}{\\partial U_i} = \\frac{\\partial h^L_{ji}U_i}{\\partial U_i} = h^L_{ji} \\\\\n",
        "\\end{equation}<br>\n",
        "Lo cual nos deja con:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial U} = \\frac{\\partial\\cal L}{\\partial u^{L+1}} \\cdot h^L_{ji}\\\\  \\\\\n",
        "\\end{equation}<br>\n",
        "La derivada a la derecha de la igualdad ya la hemos calculado en la parte anterior. Notamos que $h_{ji}^L$ corresponde a la transpuesta de $h^L$ y tenemos:\n",
        "\\begin{equation}\n",
        "\\boxed{\\frac{\\partial\\cal L}{\\partial U} = h^T  \\frac{1}{N} (\\hat{y}-y)}\\\\  \\\\\n",
        "\\end{equation}<br>\n",
        "Por otro lado, para $c$ tenemos:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial c} = \\frac{\\partial \\cal L}{\\partial u^{L+1}}\\frac{\\partial u^{L+1}}{\\partial c} \\\\\n",
        "\\end{equation}<br>\n",
        "\n",
        "Recordando que $u^{L+1} = h^L_{jk}U_k+c$ y notando que derivar $\\frac{\\partial u^{L+1}}{\\partial c}$ entrega el equivalente tensorial de derivar $f(x) = x$, es decir, un tensor unidimensional de solo 1's, obtenemos:\n",
        "\n",
        "\\begin{equation}\n",
        "\\boxed{ \\frac{\\partial\\cal L}{\\partial c}  = \\frac{1}{N} sum_1(\\hat{y}-y)}\\\\\n",
        "\\end{equation} <br>\n",
        "<br>\n",
        "Es decir, la derivada de $\\cal L$ con respecto a $c$ corresponde a la suma de todos los valores en la primera dimensión del tensor resultante de derivar $\\cal L$ con respecto a $u^{L+1}$.\\\\\n",
        "\n",
        "Finalmente para $h$ tenemos:\n",
        "\\begin{equation}\n",
        " \\frac{\\partial\\cal L}{\\partial h^{L}} = \\frac{\\partial \\cal L}{\\partial u^{L+1}_k}\\frac{\\partial u_k^{L+1}}{\\partial h^L_{ij}}\n",
        "\\end{equation}<br>\n",
        "Nuevamente usamos que $u^{L+1} = h^L_{jk}U_k+c$: \n",
        "\\begin{equation}\n",
        " \\frac{\\partial u_k^{L+1}}{\\partial h^L_{ij}} = \\frac{\\partial h^L_{kl} U_l}{\\partial h^L_{ij}} \\\\\n",
        "\\end{equation}<br>\n",
        "\\begin{equation}\n",
        "\\implies \\frac{\\partial \\cal L}{\\partial u^{L+1}_i}\\frac{\\partial u_i^{L+1}}{\\partial h^L_{ij}} = \\frac{\\partial \\cal L}{\\partial u_i^{L+1}}  U_j \n",
        "\\end{equation}<br>\n",
        "Pues solo nos interesa el caso en que la derivada es no nula: $k=i,\\; l=j$. Tenemos entonces:\n",
        "\\begin{equation}\\implies \\frac{\\partial \\cal L}{\\partial h^L_{ij}} = \\frac{\\partial \\cal L}{\\partial u_i^{L+1}}U_j \n",
        "\\end{equation}<br>\n",
        "Lo cual se traduce en:\n",
        "\\begin{equation}\\implies \\boxed{ \\frac{\\partial \\cal L}{\\partial h^L} =  \\frac{\\partial \\cal L}{\\partial u_i^{L+1}} \\otimes  U^T  }\n",
        "\\end{equation}<br>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1WNYoTIHXDS0"
      },
      "source": [
        "## 2c) Derivando desde las capas escondidas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vz7TChQ8XDS0"
      },
      "source": [
        "Escribe tus respuestas acá. Repite los siguientes cálculos para $\\text{relu}, \\text{celu}, \\text{swish}$\n",
        "<br>\n",
        "Por enunciado, para esta parte se considerará $ \\frac{\\partial L}{\\partial h^k}$ como conocido.\n",
        "\n",
        "####**Para RELU:**\n",
        "Usando la notación de Einstein:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial u^{(k)}} \\implies \\frac{\\partial  \\cal L}{\\partial u_{ij}^k} = \\frac{\\partial \\cal L}{\\partial h^k_{kl}} \\frac{\\partial h_{kl}^k}{\\partial u_{ij}^k} \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Notamos que la segunda derivada a la derecha de la igualdad es no nula si y solo si $k=i$ y $l=j$, lo que nos entrega:\n",
        "\\begin{equation}\\\\\n",
        "\\frac{\\partial  \\cal L}{\\partial u_{ij}^k} = \\frac{\\partial L}{\\partial h^k_{ij}} \\frac{\\partial h_{ij}^k}{\\partial u_{ij}^k} \n",
        "\\end{equation}<br>\n",
        "$h$ es RELU, por lo que conocemos su derivada:\n",
        "\n",
        "\\begin{equation}\\\\\n",
        "\\frac{\\partial  \\cal L}{\\partial u_{ij}^k} = \\frac{\\partial L}{\\partial h^k_{ij}} \\cdot step(u_{ij}^k) \n",
        "\\end{equation}\n",
        "<br>\n",
        "Donde $step(x)$ corresponde a la derivada de RELU calculada en la primera parte. Luego:\n",
        "\n",
        "\\begin{equation}\\\\\n",
        "\\boxed{\\frac{\\partial  \\cal L}{\\partial u^k} = \\frac{\\partial L}{\\partial h^k} \\cdot step(u^k)} \n",
        "\\end{equation}<br>\n",
        "A continuación usaremos $\\frac{\\partial  \\cal L}{\\partial u^k}$ como conocida en los calculos siguientes (no desenvolveremos la expresión). \n",
        "\n",
        "Continuamos con la derivada con respecto a $W$:\n",
        "<br>\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial W^{(k)}} \\implies \\frac{\\partial \\cal L}{\\partial W_{ij}^k} = \\frac{\\partial \\cal L}{\\partial u_{kl}^k }\\frac{u^k_{kl}}{\\partial W_{ij}^k} \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Recordamos que $u_{kl}^k = h_{kr}^{k-1}W_{rl}^k+b_l^k$, con lo cual:\n",
        "<br>\n",
        "\\begin{equation}\n",
        "\\frac{u^k_{kl}}{\\partial W_{ij}^k} = \\begin{cases}\n",
        "  0 & r\\neq i\\; \\lor\\; l\\neq j \\\\\n",
        "  h_{ki}^{k-1} & r = i\\; \\lor\\; l= j         \\end{cases}  \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Luego: \n",
        "\\begin{equation}\n",
        " \\frac{\\partial \\cal L}{\\partial W_{ij}^k} = \\frac{\\partial \\cal L}{\\partial u_{kj}^k }\\cdot h^{k-1}_{ki} \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Con lo cual tenemos:\n",
        "\\begin{equation}\n",
        "\\boxed{\n",
        "\\frac{\\partial\\cal L}{\\partial W^{(k)}} = (h^{k-1})^T \\cdot \\frac{\\partial \\cal L}{\\partial u^k} } \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Continuamos con la derivada con respecto a $b$:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial b^{(k)}} \\implies \\frac{\\partial \\cal L}{\\partial u_{kl}^k} \\frac{\\partial u_{kl}^k}{\\partial b_i^k} \\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Notamos que:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial u_{kl}^k}{\\partial b_i^k} = \\begin{cases} \n",
        "1 & l=i \\\\\n",
        "0 & l\\neq i \\end{cases}\n",
        "\\end{equation}\n",
        "<br>\n",
        "Con lo cual:\n",
        "\\begin{equation}\n",
        "\\boxed{\n",
        "\\frac{\\partial \\cal L}{\\partial b^k_i} = \\frac{\\partial L}{\\partial u_{ki}^k}\\cdot \\mathbb{1}_{ki} = \\sum_k \\frac{\\partial \\cal L}{\\partial u_{ki}^k} = sum_1\\left(\\frac{\\partial \\cal L}{\\partial u^k}\\right)}\n",
        "\\end{equation}\n",
        "<br>\n",
        "Que corresponde a sumar todos los valores en la primera dimensión de $\\frac{\\partial \\cal L}{\\partial u^k}$. \n",
        "<br>\n",
        "Finalmente, para la derivada con respecto a $h^{k-1}$:\n",
        "\n",
        "<br>\n",
        "\\begin{equation}\n",
        "\\frac{\\partial\\cal L}{\\partial h^{(k-1)}} \\implies \\frac{\\partial \\cal L}{\\partial h_{ij}^{k-1}} = \\frac{\\partial \\cal L}{\\partial u_{kl}^k}\\frac{\\partial u_{kl}^k}{\\partial h_{ij}^{k-1}}\\\\\n",
        "\\end{equation}\n",
        "<br>\n",
        "Notamos que:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial u_{kl}^k}{\\partial h_{ij}^{k-1}} = \\begin{cases}\n",
        "W_{jl}^{k+1} & i=k\\\\\n",
        "0 & i\\neq k\n",
        "\\end{cases}\n",
        "\\end{equation}\n",
        "<br>\n",
        "Con lo cual:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial \\cal L}{\\partial h_{ij}^{k-1}} = \\frac{\\partial \\cal L}{\\partial u_{il}^k}\\cdot W_{jl}^k\n",
        "\\end{equation}\n",
        "<br>\n",
        "Recordando que estamos usando notación de Einstein y que $W_{jl}$ no es más que la transpuesta de $W$, esto se traduce en:\n",
        "\\begin{equation}\n",
        "\\boxed{\n",
        "\\frac{\\partial \\cal L}{\\partial h^{k-1}} = \\frac{\\partial \\cal L}{\\partial u^k}\\otimes (W^k)^T}\n",
        "\\end{equation}\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "####**Para CELU y SWISH:** El procedimiento es análogo, y los resultados son los mismos - salvo por el valor de $\\frac{\\partial \\cal L}{\\partial u^k}$ -. Notemos que:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial \\cal L}{\\partial u^k} = \\frac{\\partial \\cal L}{\\partial h^k}\\frac{\\partial h^k}{\\partial u^k}\n",
        "\\end{equation} \n",
        "<br>\n",
        "Donde:\n",
        "\\begin{equation}\n",
        "\\frac{\\partial h^k}{\\partial u^k} = \\frac{\\partial f^k(u^k)}{\\partial u^k}\n",
        "\\end{equation}\n",
        "<br>\n",
        "Corresponde a la derivada de la función de activación, en estos casos CELU y SWISH, que ya calculamos en la primera parte. Luego basta reemplazar los valores de dichas derivadas en los resultados obtenidos para RELU y se tiene lo pedido."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0n29s-6zXDS1"
      },
      "source": [
        "# Parte 3: Backpropagation en nuestra red"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "do04-nhfXDS2"
      },
      "source": [
        "## 3a) Método `backward` + parte 3b) Opcional"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ytN2y-FMXDS3"
      },
      "source": [
        "# Se optó por usar la clase FFNN de la pauta.\n",
        "\n",
        "class FFNN(torch.nn.Module):\n",
        "  def __init__(self, F, l_h, l_a, C):\n",
        "    super(FFNN, self).__init__()\n",
        "    \n",
        "    sizes = [F] + l_h + [C]\n",
        "    self.Ws = torch.nn.ParameterList([torch.nn.Parameter(torch.randn(sizes[i], sizes[i+1])) for i in range(len(sizes)-1)])\n",
        "    self.bs = torch.nn.ParameterList([torch.nn.Parameter(torch.zeros(h)) for h in sizes[1:]])\n",
        "    self.fs = l_a\n",
        "    self.cacheh=[]\n",
        "    self.cacheu=[]\n",
        "\n",
        "  def num_parameters(self):\n",
        "    total = 0\n",
        "    for p in self.parameters():\n",
        "      total += p.numel()\n",
        "    return total\n",
        "\n",
        "  #resumen\n",
        "  def resumen(self):\n",
        "    for name, p in self.named_parameters():\n",
        "      print('{}:\\t{}'.format(name, p.size()))\n",
        "  pass\n",
        "\n",
        "  #load weights\n",
        "  def load_weights(self, Ws, U, bs, c):\n",
        "    self.Ws = torch.nn.ParameterList([torch.nn.Parameter(W) for W in Ws + [U]])\n",
        "    self.bs = torch.nn.ParameterList([torch.nn.Parameter(b) for b in bs + [c]])\n",
        "  \n",
        "  #forward \n",
        "  def forward(self, x):\n",
        "    for W, b, f in zip(self.Ws[:-1], self.bs[:-1], self.fs):\n",
        "      u = torch.mm(x, W) + b\n",
        "      x = f(u)\n",
        "      self.cacheu.append(u)\n",
        "      self.cacheh.append(x) \n",
        "    u = torch.mm(x, self.Ws[-1]) + self.bs[-1]\n",
        "    x = softmax(u, dim=1)\n",
        "    self.cacheu.append(u)\n",
        "    self.cacheh.append(x)\n",
        "    return x\n",
        "\n",
        "  #backward\n",
        "  def backward(self, x, y, y_pred):\n",
        "    ncapas = len(self.Ws)-1\n",
        "    b = x.size()[0]\n",
        "    # dL_du inicial\n",
        "    dL_du_act = (1/b) * (y_pred-y)\n",
        "  \n",
        "    for i in range(ncapas, 0, -1):\n",
        "      \n",
        "      #Gradiente de los parámetros, guardando los de interés\n",
        "      self.bs[i].grad = torch.sum(dL_du_act, 0)\n",
        "      self.Ws[i].grad = self.cacheh[i-1].t() @ dL_du_act\n",
        "\n",
        "      #Actualizacion de dL_du para siguiente iteración\n",
        "      dL_dh = dL_du_act @ self.Ws[i].t()\n",
        "      funcion_activ = self.fs[i-1]\n",
        "      dL_du_act = dL_dh * funcion_activ(self.cacheu[i-1], gradient=True)\n",
        "      \n",
        "    self.bs[0].grad = torch.sum(dL_du_act, 0)\n",
        "    self.Ws[0].grad = x.t() @ dL_du_act\n",
        "    "
      ],
      "execution_count": 232,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1S3suoQ2tZfX",
        "outputId": "5367afee-c054-4c8b-8867-7ba75e8b8a09",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "# Tests del API del curso\n",
        "# (estos Tests NO sustituyen al anterior en la verificación de los gradientes)\n",
        "for test in ['mnist-model']:\n",
        "  # Obtenemos los parámetos de la red desde el API\n",
        "  F, l_h, l_a, C, Ws, U, bs, c, X, y = corrector.get_test_data(homework=2, question=\"3a\", test=test, token=token)\n",
        "  l_a = [f for s in l_a for f in [sig, tanh, relu, celu] if f.__name__ == s]\n",
        "\n",
        "  # Inicializamos modelo con parámetros del API\n",
        "  your_model = FFNN(F=F, l_h=l_h, l_a=l_a, C=C)\n",
        "  your_model.load_weights([torch.Tensor(l) for l in Ws], torch.Tensor(U), [torch.Tensor(l) for l in bs], torch.Tensor(c))\n",
        "  \n",
        "  # Obtenemos el índice del parámetro Ws[1] en la lista de parámetros de tu modelo\n",
        "  idx = next(i for i, p in enumerate(your_model.parameters()) if p.size() == torch.Tensor(Ws[1]).size() and torch.all(torch.Tensor(Ws[1])==p))\n",
        "\n",
        "  # Ejecutemos el forward de para input del API\n",
        "  y_pred = your_model(torch.Tensor(X))\n",
        "  \n",
        "  # Ejecutemos el backward de tu modelo para ver como se comporta\n",
        "  s = timer()\n",
        "  your_model.backward(torch.Tensor(X), torch.Tensor(y), y_pred)\n",
        "  t = timer() - s\n",
        "  #print(list(your_model.parameters())[idx])\n",
        "  \n",
        "  # Veamos todo fue OK :)\n",
        "  # Si el Test te falla algunas veces por [time], puedes hacer time=0 ;-)\n",
        "  corrector.sumbit(homework=2, question=\"3a\", test=test, token=token, \n",
        "                   answer=list(your_model.parameters())[idx].grad.mean(), time=t)"
      ],
      "execution_count": 238,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using cached test data\n",
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s6_7qOkAlcTX"
      },
      "source": [
        "## 3c) Opcional: Chequeo de gradiente"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AjfsSKLIlgKj"
      },
      "source": [
        "# No es necesario que entregues código en esta parte dado \n",
        "# que solo es necesario para debuggear que tu implementación está correcta.\n",
        "# Pero si quieres, igual hay espacio ;-)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SDSYiQQ6nkjX"
      },
      "source": [
        "# Parte 4: Descenso de gradiente y optimización"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yqBwusuXnsjO"
      },
      "source": [
        "## 4a) Descenso de gradiente (estocástico)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tId-cHk7ntDW"
      },
      "source": [
        "# Tu código debiera comenzar así\n",
        "\n",
        "class SGD():\n",
        "  def __init__(self, parameters, lr):\n",
        "    self.parameters = [p for p in parameters]\n",
        "    self.lr = lr\n",
        "  \n",
        "  # Paso de descenso de gradiente\n",
        "  def step(self):\n",
        "    for i in range(len(self.parameters)):\n",
        "      self.parameters[i].data -= self.lr*self.parameters[i].grad\n",
        "      \n",
        "      "
      ],
      "execution_count": 234,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yN9Bh70SJGgI",
        "outputId": "a1eba7a0-9c87-42e7-9b06-4709d42c6830",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 123
        }
      },
      "source": [
        "# Tests del API del curso\n",
        "from torch.nn import Parameter\n",
        "for test in ['small-step', 'big-step', 'random']:\n",
        "  # Obtengamos una lista de parámetros (con gradientes en .grad) y un valor lr\n",
        "  ds, gs, lr, idx = corrector.get_test_data(homework=2, question=\"4a\", test=test, token=token)\n",
        "  parameters = [Parameter(torch.Tensor(d)) for d in ds]\n",
        "  for p, g in zip(parameters, gs):\n",
        "    p.grad = torch.Tensor(g)\n",
        "\n",
        "  # Inicialicemos tu SGD\n",
        "  optimizer = SGD(parameters, lr)\n",
        "\n",
        "  # Ejecutemos un paso de tu SGD para ver como se comporta\n",
        "  s = timer()\n",
        "  optimizer.step()\n",
        "  t = timer() - s\n",
        "\n",
        "  # Veamos si todo fue OK :)\n",
        "  # Si el Test te falla algunas veces por [time], puedes hacer time=0 ;-)\n",
        "  corrector.sumbit(homework=2, question=\"4a\", test=test, token=token, \n",
        "                   answer=parameters[idx].data, time=0)"
      ],
      "execution_count": 237,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using cached test data\n",
            "Correct Test!\n",
            "Using cached test data\n",
            "Correct Test!\n",
            "Using cached test data\n",
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wy0KFSX4nzP0"
      },
      "source": [
        "## 4b) Datos para carga"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bByG7kXlnwAQ"
      },
      "source": [
        "from torch.utils.data import Dataset, DataLoader\n",
        "import random\n",
        "\n",
        "# Tu clase debiera verse así\n",
        "class RandomDataset(Dataset):\n",
        "  def __init__(self, N, F, C):\n",
        "    self.X = torch.rand(N,F)\n",
        "    R_N_C = torch.zeros(N,C)\n",
        "    for row in R_N_C:\n",
        "      indice = random.randint(0,C-1)\n",
        "      row[indice] = 1.0\n",
        "    self.Y = R_N_C\n",
        "\n",
        "  def __len__(self):\n",
        "    return self.X.size()[0]\n",
        "  \n",
        "  def __getitem__(self, i):\n",
        "    return self.X[i], self.Y[i]"
      ],
      "execution_count": 323,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x49Wy06IsJDU",
        "outputId": "2e9614d9-c87b-4030-d20a-61fc84d42752",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "# Inicialicemos un RandomDataset de prueba\n",
        "N,F,C=100,300,10\n",
        "your_dataset = RandomDataset(N,F,C)\n",
        "\n",
        "# Veamos como se comportan __len__ y __getitem__\n",
        "print(\"Correct Test!\" if len(your_dataset) == N else \"Failed Test [len]\") \n",
        "print(\"Correct Test!\" if type(your_dataset[N//2]) == tuple and len(your_dataset[N//3]) == 2 else \"Failed Test [getitem]\")"
      ],
      "execution_count": 324,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Correct Test!\n",
            "Correct Test!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2-q8vJOMn3AA"
      },
      "source": [
        "## 4c) Optimizando los parámetros de la red para datos al azar"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ap0AKJijn5DY"
      },
      "source": [
        "# Tu código acá\n",
        "def entrenar_FFNN(red, dataset, optimizador, epochs=20, batch_size=20, device='cuda', reports_every=1):\n",
        "  red.to(device)\n",
        "  \n",
        "  # Muestra la cantidad de parámetros\n",
        "  print('Cantidad de parámetros:', red.num_parameters())\n",
        "  \n",
        "  # Inicialicemos un DataLoader para los ejemplos de dataset\n",
        "  data = DataLoader(dataset, batch_size, shuffle = True)\n",
        "\n",
        "  # Comienza el entrenamiento\n",
        "  loss, acc = [], []\n",
        "  tiempo_epochs = 0\n",
        "  for e in range(1,epochs+1):\n",
        "    # Comenzar a tomar el tiempo de esta epoch\n",
        "    L = 0\n",
        "    correctas_epoch = 0\n",
        "    inicio_epoch = time.clock()\n",
        "    \n",
        "    for x, y in data:\n",
        "       # Pasar a device si fuera necesario\n",
        "      x, y = x.to(device), y.to(device)\n",
        "      \n",
        "      # Pasada hacia adelante (forward)\n",
        "      y_pred = red.forward(x)\n",
        "      \n",
        "      # Función de pérdida CELoss estable\n",
        "      L += CELoss(y_pred, y, estable=True)\n",
        "      correct = torch.sum(torch.argmax(y_pred, dim=1) == torch.argmax(y, dim=1)).item()\n",
        "      correctas_epoch +=correct\n",
        "\n",
        "      # Computa los gradientes hacia atrás (backpropagation)\n",
        "      red.backward(x, y, y_pred)\n",
        "      \n",
        "      # Descenso de gradiente para actualizar los parámetros\n",
        "      optimizador.step()\n",
        "    \n",
        "    #Guardar tiempo de la epoca\n",
        "    tiempo_epochs += time.clock() - inicio_epoch\n",
        "\n",
        "    \n",
        "    '''epoch_acc = epoch_correct/len(dataset)*100\n",
        "    acc.append(epoch_acc)\n",
        "    loss.append(L)\n",
        "    tiempo_epochs += time.clock() - inicio_epoch\n",
        "    sys.stdout.write(\n",
        "          '\\rEpoch:{0:03d}'.format(e) + ' Acc:{0:.2f}%'.format(epoch_acc)\n",
        "          + ' Loss:{0:.4f}'.format(L) \n",
        "          + ' Tiempo/epoch:{0:.3f}s'.format(tiempo_epochs/e))\n",
        "'''\n",
        "    # Reporta el acierto cada \"reports_every\" cantidad de épocas\n",
        "    if e % reports_every == 0:\n",
        "      \n",
        "      # Calcula la certeza de las predicciones sobre todo el conjunto\n",
        "      X = dataset.X.to(device)\n",
        "      Y = dataset.Y.to(device)\n",
        "\n",
        "      # Predice usando la red\n",
        "      Y_PRED = red.forward(X)\n",
        "      \n",
        "      # Calcula la pérdida de todo el conjunto\n",
        "      L_total = CELoss(Y_PRED, Y)\n",
        "\n",
        "      correctos = torch.sum(torch.argmax(Y_PRED, dim=1) == torch.argmax(Y, dim=1)).item()\n",
        "\n",
        "      # Calcula la precision\n",
        "      accuracy = (correctos / N) * 100\n",
        "\n",
        "      # Guardar resultados en loss, acc\n",
        "      acc.append(accuracy)\n",
        "      loss.append(L_total)\n",
        "      \n",
        "      # Mostrar resultados por epoch\n",
        "      sys.stdout.write(\n",
        "            '\\rEpoch:{0:03d}'.format(e) + ' Acc:{0:.2f}%'.format(accuracy)\n",
        "            + ' Loss:{0:.4f}'.format(L_total) \n",
        "            + ' Tiempo/epoch:{0:.3f}s'.format(tiempo_epochs/e))\n",
        "      \n",
        "  return loss, acc"
      ],
      "execution_count": 345,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M0VbGtY5aWLk",
        "outputId": "a6c0fa03-b4fa-44dd-dea9-4cc60f7a9671",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "N= 500\n",
        "F = 50\n",
        "C = 10\n",
        "dataset = RandomDataset(N, F, C)\n",
        "\n",
        "model = FFNN(F, [50, 30], [sig, sig], C)\n",
        "optimizer = SGD(model.parameters(), 0.06)\n",
        "with torch.no_grad():\n",
        "  loss, acc = entrenar_FFNN(model, dataset, optimizer, epochs=600, batch_size=20)\n",
        "\n"
      ],
      "execution_count": 346,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cantidad de parámetros: 4390\n",
            "Epoch:600 Acc:20.80% Loss:2.1979 Tiempo/epoch:0.042s"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LTwKG8bvbBVB"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NDnYdhV0n_X-"
      },
      "source": [
        "## 4d) Graficando la pérdida/error en el tiempo"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oufOfvyIRvAT"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_results(loss, acc, color):\n",
        "  # Muestra dos figuras: \n",
        "  #  (1) gráfico para la lista `loss` (Loss) y \n",
        "  #  (2) gráfico para la lista `acc` (Accuracy)\n",
        "  ncurvas = len(loss)\n",
        "\n",
        "  f1 = plt.figure(1)\n",
        "  ax1 = f1.add_subplot(111)\n",
        "  ax1.set_title(\"Loss\")    \n",
        "  ax1.set_xlabel('epochs')\n",
        "  ax1.set_ylabel('loss')\n",
        "  ax1.plot(loss, color)\n",
        "\n",
        "  f2 = plt.figure(2)\n",
        "  ax2 = f2.add_subplot(111)\n",
        "  ax2.set_title(\"Accuracy\")    \n",
        "  ax2.set_xlabel('epochs')\n",
        "  ax2.set_ylabel('acc')\n",
        "  ax2.plot(acc, color)\n"
      ],
      "execution_count": 410,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NVhVgf1poBkQ",
        "outputId": "de36ce82-fc77-4c35-d584-3b484aea7939",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 700
        }
      },
      "source": [
        "  # Configuración\n",
        "  model_1 = FFNN(F, [50, 30], [sig, sig], C)\n",
        "  model_2 = FFNN(F, [50, 30], [tanh, sig], C)\n",
        "  model_3 = FFNN(F, [50, 30], [sig, swish], C)\n",
        "  N = 500\n",
        "  F = 50\n",
        "  C = 10\n",
        "  dataset = RandomDataset(N,F,C)\n",
        "  epochs = 600\n",
        "  batch_size = 20\n",
        "  optimizer_1 = SGD(model_1.parameters(), 0.06)\n",
        "  optimizer_2 = SGD(model_2.parameters(), 0.06)\n",
        "  optimizer_3 = SGD(model_3.parameters(), 0.06)\n",
        "\n",
        "  # Entrenamiento\n",
        "  loss1, acc1 = entrenar_FFNN(model_1, dataset, optimizer_1, epochs, batch_size)\n",
        "  loss2, acc2 = entrenar_FFNN(model_2, dataset, optimizer_2, epochs, batch_size)\n",
        "  loss3, acc3 = entrenar_FFNN(model_3, dataset, optimizer_3, epochs, batch_size)\n",
        " \n",
        "  # Graficos individuales de cada configuración\n",
        "  plot_results(loss1, acc1, 'r')\n",
        "  plot_results(loss2, acc2, 'b')\n",
        "  plot_results(loss3, acc3, 'g')\n",
        "\n",
        "  "
      ],
      "execution_count": 412,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cantidad de parámetros: 4390\n",
            "Epoch:600 Acc:18.00% Loss:2.2520 Tiempo/epoch:0.048sCantidad de parámetros: 4390\n",
            "Epoch:600 Acc:19.20% Loss:2.4883 Tiempo/epoch:0.053sCantidad de parámetros: 4390\n",
            "Epoch:600 Acc:17.80% Loss:18.4207 Tiempo/epoch:0.060s"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D3Gp8H-xrt2W"
      },
      "source": [
        "**En las figuras anteriores:**\n",
        "\n",
        "\n",
        "1.   Curvas azules: Red con funciones de activación sigmoide y sigmoide\n",
        "2.   Curvas rojas: Red con funciones de activación tangente hiperbólica y sigmoide\n",
        "3.   Curvas amarillas: Red con funciones de activación sigmoide y swish\n",
        "\n",
        "Se observa que, para la configuración anterior, la red con mejor precisión es aquella conformada por dos capas con activación sigmoide, llegando a un 20% de precisión. Luego sigue la combinación de capas con función de activación tangente hiperbólica y sigmoide, alcanzando un 19.20% de precisión. Finalmente en el tercer lugar se encuentra la red conformada por funciones de activación sigmoide y swish. La perdida por CELoss presenta un comportamiento extraño para esta última. Se atribuye que dicho comportamiento se debe a errores de implementación. \n",
        "\n",
        "Se observa también que para las primeras 100 épocas la red con mejor precisión es la que involucra swish, sin embargo, se ve ampliamente superada por sus pares una vez que el número de epocas aumenta considerablemente. Por su parte, las redes sig/sig y tanh/sig comienzan con una diferencia importante, más se acercan a medida que el número de épocas supera las 400.\n",
        "\n",
        "Finalmente, el gráfico del comportamiento de Loss - que no se aprecia del todo bien debido al problema con la pérdida de swish -, muestra un descenso rápido de la pérdida para la red sig/sig, convergente a 2.5 a partir de las 100 épocas. Sin embargo, la red tanh/sig tiene un descenso casi inmediato al mismo valor, que se compensa por otra parte con presentar una menor precisión. \n",
        "\n",
        "Cabe mencionar que las precisiones alcanzadas no son para nada altas, alcanzando en algunas iteraciones el 25%. Esto no es de extrañar, pues los datos con los que se está trabajando son aleatorios. Aún así, el resultado es mejor que random, pues se está trabajando sobre 10 clases - y por ende una clasificación random tendería a una precisión del 10%)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ICCODVV9oF9d"
      },
      "source": [
        "## 4e) Opcional: Optimizando tu red para MNIST"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-cRIuWQroDW9"
      },
      "source": [
        "# Tu código de carga de datos, creación de la red, \n",
        "# entrenamiento/optimización y reportes acá"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}